import ballerina/grpc;

listener grpc:Listener ep = new (9090);

map<UserInfo> userMap = {};
map<CourseInfo> courseMap = {};
map<Assignments> assignmentMap = {};
map<AssignmentInfo> assInfoMap = {};

@grpc:ServiceDescriptor {descriptor: ROOT_DESCRIPTOR_PB, descMap: getDescriptorMapPb()}
service "Assessment_Management_System" on ep {

    remote function create_assignment(grpc:Caller caller, Assignments value) returns string|error {
        string first_assignment = value.numberOfAssignment;
        assignmentMap[value.numberOfAssignment] = value;

        // Create response message.
        json payload = "Status : assignment Created; desc : " + first_assignment;

        //sending back response
        check caller->send(payload);
        check caller->complete();

        return "caller";
    }
    remote function assign_courses(grpc:Caller caller, CourseInfo value) returns string|error {
        string assign = value.course_name ;
        courseMap[value.course_name ] = value;

        // Create response message.
        json payload = "Status : Course has assigned; CourseDescriptin : " + assign;

        //sending back response
        check caller->send(payload);
        check caller->complete();

        return "caller";
    }
    remote function submit_marks(grpc:Caller caller, AssignmentInfo value) returns string|error {
        string assignmentD = value.iD;
        assInfoMap[value.iD] = value;

        // Create response message.
        string payload = "Status : Marks Submitted; Score: " + assignmentD;

        //sending back response
        check caller->send(payload);
        check caller->complete();

        return "";
    }
    remote function create_users(grpc:Caller caller, stream<UserInfo, grpc:Error?> clientStream) returns string|error {

        string userId = "";
      
        //Iterate through the client stream
        check clientStream.forEach(function(UserInfo value) {

        userId = value.iD; 
        userMap[value.iD] = value; 

        });
        // Create response 
        json payload = "Status : User created; user : " + userId;

        //sending back response
        check caller->send(payload);
        check caller->complete();

        return "";
    }
    remote function create_courses(grpc:Caller caller, stream<CourseInfo, grpc:Error?> clientStream) returns string|error {
        check caller->send("Server is processing......");

        string coursecode = "";
        check clientStream.forEach(function(CourseInfo addCourse) {
    
       // Add the new course to the map.
        coursecode = addCourse.course_code;
        courseMap[addCourse.course_code] = addCourse;
        });

        // Create response message.
       string payload = "Status : Course created; Coursecode : " + coursecode;

        // Send response to the caller.
        
        check caller->send(payload);
        check caller->complete();

        // Send entity not found error.
        payload = "Course : 'with course code "  + coursecode + "' already exist.";

        return "";
    }
    remote function register(grpc:Caller caller, stream<CourseInfo, grpc:Error?> clientStream) returns string|error {
        string courseCode = "";
        string payload;
        
        check clientStream.forEach(function(CourseInfo newRegister) {
            // Find the course that you want to register.
            courseCode = newRegister.course_code; 
            if (courseMap.hasKey(courseCode)) {
                // register for the existing course on the map.
                courseMap[courseCode] = newRegister;
            }

        });
        payload = "Course : '" + courseCode + "' registerd.";
        // Send response to the caller.
        check caller->send(payload);
        check caller->complete();

        return "";
    }
    remote function submit_assignments(grpc:Caller caller, stream<AssignmentInfo, grpc:Error?> clientStream) returns string|error {
        string assignment_id = "";
        string payload;
    
        check clientStream.forEach(function(AssignmentInfo newSubmission) {
        assignment_id = newSubmission.iD;
        assInfoMap[newSubmission.iD] = newSubmission;
        });

         // Create response message.
        payload = "Status : Assignment Submitted; Assessment : " + assignment_id;

        //sending back response
        check caller->send(payload);
        check caller->complete();

        return "";
    }
    remote function request_assignments(grpc:Caller caller, stream<AssignmentInfo, grpc:Error?> clientStream) returns string|error {
        string assignment_description = "";
        string payload;
        
        check clientStream.forEach(function(AssignmentInfo value) {
        
        // Find the course that you want to register.
        assignment_description = value.iD; 
         if (assInfoMap.hasKey(assignment_description)) {
            // register for the existing course on the map.
            assInfoMap[assignment_description] = value;
         }

        });
        payload = "assignment : '" + assignment_description + "' Requested.";
        // Send response to the caller.
        check caller->send(payload);
        check caller->complete();

    }
}
public type AssignmentInfo record {|
    string iD = "";
    string description = "";
    string course_code = "";
    string assignment_mark = "";
|};

public type Assignments record {|
    string numberOfAssignment = "";
    string description = "";
    string weight = "";
|};

public type UserInfo record {|
    string iD = "";
    string name = "";
|};

public type CourseInfo record {|
    string course_code = "";
    string course_name = "";
    UserInfo course_assessor = {};
|};

const string

public isolated function getDescriptorMapPb() returns map<string> {
    return {"google/protobuf/wrappers.protopb.proto};
}